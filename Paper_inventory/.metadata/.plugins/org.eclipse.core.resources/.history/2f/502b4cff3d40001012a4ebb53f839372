<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ page import="java.sql.*" %>
<%@page import="java.sql.DriverManager"%>
<%@page import="com.mysql.cj.jdbc.Driver"%>
<%@page import="java.sql.ResultSet"%>
<%@page import="java.sql.Statement"%>
<%@page import="java.sql.Connection"%>
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Create Purchase Order</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  <div class="container mt-5">
    <h2>Create Purchase Order</h2>
    <form action="SavePurchase.jsp" method="post" id="purchaseForm">

      <!-- Product Dropdown -->
      <div class="mb-3">
        <label for="product" class="form-label">Select Product:</label>
        <select class="form-control" id="product">
          <option value="" disabled selected>Choose a Product</option>
          <%
            try {
              Class.forName("com.mysql.cj.jdbc.Driver");
              Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3307/inventory", "root", "");
              Statement stmt = con.createStatement();
              ResultSet rs = stmt.executeQuery("SELECT product_id, product_name FROM products");
              while(rs.next()){
          %>
          <option value="<%= rs.getInt("product_id") %>"
                  data-name="<%= rs.getString("product_name") %>">
            <%= rs.getString("product_name") %>
          </option>
          <%
              }
              con.close();
            } catch(Exception e) {
              out.println("Error loading products: " + e.getMessage());
            }
          %>
        </select>
      </div>

      <!-- Quantity Input -->
      <div class="mb-3">
        <label for="quantity" class="form-label">Quantity:</label>
        <input type="number" class="form-control" id="quantity" min="1" placeholder="Enter quantity">
      </div>

      <!-- Button to add product to order list -->
      <button type="button" class="btn btn-success mb-3" onclick="addProduct()">Add Product</button>
      
      <!-- Purchase Order Product List Table -->
      <table class="table table-bordered" id="productTable">
        <thead>
          <tr>
            <th>Product</th>
            <th>Quantity</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody>
        </tbody>
      </table>
      
      <!-- Submit Purchase Order Button -->
      <button type="submit" class="btn btn-primary">Submit Purchase Order</button>
    </form>
  </div>

  <!-- Bootstrap Bundle JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

  <!-- JavaScript for Dynamic Purchase Order Creation -->
  <script>
    let purchaseProducts = [];

    function addProduct() {
      const productSelect = document.getElementById('product');
      const selectedOption = productSelect.options[productSelect.selectedIndex];
      if (productSelect.value === "") {
        alert("Please select a product.");
        return;
      }
      function addProduct() {
    	  const productSelect = document.getElementById('product');
    	  const selectedOption = productSelect.options[productSelect.selectedIndex];

    	  if (productSelect.value === "") {
    	    alert("Please select a product.");
    	    return;
    	  }

    	  const productId = productSelect.value;
    	  // Safer way to get product name
    	  const productName = selectedOption.getAttribute('data-name') || selectedOption.text;
    	  const quantity = parseInt(document.getElementById('quantity').value);

    	  if (isNaN(quantity) || quantity <= 0) {
    	    alert("Please enter a valid quantity.");
    	    return;
    	  }

    	  // Check if product already added
    	  if (purchaseProducts.some(p => p.productId === productId)) {
    	    alert("Product already added. You can remove it and add again with updated quantity.");
    	    return;
    	  }

    	  purchaseProducts.push({ productId, productName, quantity });

    	  const tableBody = document.getElementById('productTable').getElementsByTagName('tbody')[0];
    	  const newRow = tableBody.insertRow();

    	  newRow.innerHTML = `
    	    <td>${productName} <input type="hidden" name="productId[]" value="${productId}"></td>
    	    <td>${quantity} <input type="hidden" name="quantity[]" value="${quantity}"></td>
    	    <td><button type="button" class="btn btn-danger btn-sm" onclick="removeProduct(this)">Remove</button></td>
    	  `;

    	  // Reset inputs
    	  productSelect.selectedIndex = 0;
    	  document.getElementById('quantity').value = "";
    	}

      const productId = productSelect.value;
      const productName = selectedOption.getAttribute('data-name');
      const quantity = parseInt(document.getElementById('quantity').value);

      if (isNaN(quantity) || quantity <= 0) {
        alert("Please enter a valid quantity.");
        return;
      }

      // Check if product already added â€” optional: update quantity instead of adding duplicate
      for (let i = 0; i < purchaseProducts.length; i++) {
        if (purchaseProducts[i].productId === productId) {
          alert("Product already added. You can remove it and add again with updated quantity.");
          return;
        }
      }

      // Add to purchaseProducts array
      purchaseProducts.push({
        productId: productId,
        productName: productName,
        quantity: quantity
      });

      // Add a new row to the table
      const tableBody = document.getElementById('productTable').getElementsByTagName('tbody')[0];
      const newRow = tableBody.insertRow();
      newRow.innerHTML = `
        <td>${productName} <input type="hidden" name="productId[]" value="${productId}"></td>
        <td>${quantity} <input type="hidden" name="quantity[]" value="${quantity}"></td>
        <td><button type="button" class="btn btn-danger btn-sm" onclick="removeProduct(this)">Remove</button></td>
      `;

      // Reset inputs
      productSelect.selectedIndex = 0;
      document.getElementById('quantity').value = "";
    }

    function removeProduct(button) {
      const row = button.parentNode.parentNode;
      const productId = row.querySelector("input[name='productId[]']").value;

      // Remove from purchaseProducts array
      purchaseProducts = purchaseProducts.filter(p => p.productId !== productId);

      // Remove row from table
      row.parentNode.removeChild(row);
    }
  </script>
</body>
</html>