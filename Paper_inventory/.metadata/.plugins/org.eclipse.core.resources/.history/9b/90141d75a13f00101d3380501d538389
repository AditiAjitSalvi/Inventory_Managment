<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@page import="java.sql.PreparedStatement"%>
<%@page import="java.sql.DriverManager"%>
<%@page import="com.mysql.cj.jdbc.Driver"%>
<%@page import="java.sql.ResultSet"%>
<%@page import="java.sql.Statement"%>
<%@page import="java.sql.Connection"%>
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Orders</title>
<!-- Bootstrap CSS -->

<link
	href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
	rel="stylesheet">
<!-- Font Awesome for icons -->
<link rel="stylesheet"
	href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
<!-- Custom CSS -->
<style>
/* Main Layout */
body {
	margin: 0;
	padding: 0;
	background-color: #f8f9fa;
	font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.dashboard-container {
	display: flex;
	min-height: 100vh;
}

/* Sidebar Styles */
.sidebar {
	width: 240px;
	background-color: #3b82f6; /* Blue 600 equivalent */
	color: white;
	transition: all 0.3s ease-in-out;
	display: flex;
	flex-direction: column;
}

.sidebar.collapsed {
	width: 64px;
}

.sidebar-header {
	display: flex;
	justify-content: space-between;
	align-items: center;
	padding: 16px;
}

.sidebar-title {
	font-size: 1.25rem;
	font-weight: bold;
	margin: 0;
}

.sidebar-toggle {
	background: transparent;
	border: none;
	color: white;
	cursor: pointer;
	padding: 8px;
}

.sidebar-toggle:hover {
	background-color: rgba(255, 255, 255, 0.1);
	border-radius: 4px;
}

.sidebar-menu {
	display: flex;
	flex-direction: column;
	padding-top: 16px;
}

.sidebar-link {
	display: flex;
	align-items: center;
	padding: 12px 16px;
	text-decoration: none;
	color: white;
	margin: 4px 0;
	transition: background-color 0.2s;
}

.sidebar-link:hover {
	background-color: #2563eb; /* Blue 700 equivalent */
	color: white;
}

.sidebar-link.active {
	background-color: #1d4ed8; /* Blue 800 equivalent */
	color: white;
}

.sidebar-link i {
	font-size: 1.25rem;
	width: 20px;
	text-align: center;
}

.sidebar-link .link-text {
	margin-left: 12px;
	white-space: nowrap;
}

.sidebar.collapsed .sidebar-title, .sidebar.collapsed .link-text {
	display: none;
}

/* Main Content */
.main-content {
	flex: 1;
	padding: 24px;
	overflow-y: auto;
}

/* Stat Cards */
.stat-card {
	border-radius: 8px;
	border: 1px solid rgba(0, 0, 0, 0.125);
	box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.stat-icon {
	font-size: 1.25rem;
	color: #6b7280; /* Text muted equivalent */
}

.stat-title {
	font-size: 0.875rem;
	color: #6b7280; /* Text muted equivalent */
	margin-bottom: 4px;
}

.stat-value {
	font-size: 1.5rem;
	font-weight: bold;
	margin: 0;
}

/* Chart Container */
.chart-container {
	height: 320px;
	width: 100%;
}

/* Product Visualization */
.product-visualization {
	height: 256px;
	background-color: #312e81; /* Indigo 950 equivalent */
	border-radius: 50%;
}

/* Status Badges */
.status {
	padding: 4px 8px;
	border-radius: 4px;
	font-size: 0.75rem;
	font-weight: 500;
	display: inline-block;
	text-align: center;
}

.status.pending {
	background-color: #fff8e6;
	color: #d97706; /* Amber 500 equivalent */
}

.status.urgent {
	background-color: #fef2f2;
	color: #ef4444; /* Red 500 equivalent */
}

.status.completed {
	background-color: #ecfdf5;
	color: #10b981; /* Green 500 equivalent */
}

/* Orders Page Styles */
.orders-container {
	max-width: 100%;
	margin: 0 auto;
}

.search-wrapper {
	width: 300px;
}

.order-table {
	font-size: 0.9rem;
}

.order-table th {
	font-weight: 600;
	color: #4b5563;
	border-bottom-width: 1px;
}

.order-table td {
	vertical-align: middle;
}

.order-table .form-check {
	margin: 2;
}

/* Responsive Adjustments */
@media ( max-width : 768px) {
	.sidebar {
		width: 64px;
	}
	.sidebar .sidebar-title, .sidebar .link-text {
		display: none;
	}
	.main-content {
		padding: 16px;
	}
	.orders-container .btn-group {
		display: flex;
		flex-direction: column;
	}
	.orders-container .btn-group .btn {
		margin-bottom: 8px;
		margin-right: 0 !important;
	}
	.search-wrapper {
		width: 100%;
		margin-bottom: 16px;
	}
}

.action-buttons {
	position: absolute;
	right: 20px;
	top: 150px;
	display: flex;
	gap: 10px;
}

@media ( max-width : 992px) {
	.orders-container .d-flex {
		flex-direction: column;
	}
	.orders-container .d-flex .btn {
		margin-bottom: 8px;
	}
}

.card:hover {
	transform: translateY(-5px);
	box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
	transition: 0.3s ease;
}
</style>
</head>
<body>
	<div class="dashboard-container">
		<!-- Sidebar -->
		<div class="sidebar" id="sidebar">
			<div class="sidebar-header">
				<h2 class="sidebar-title">Dashboard</h2>
				<button class="btn sidebar-toggle" id="sidebarToggle">
					<i class="fa fa-bars"></i>
				</button>
			</div>
			<div class="sidebar-menu">
				<div class="profile">
					<a href="#" class="profile-link"> <img
						src="https://via.placeholder.com/50" alt="Owner"
						class="profile-image"> <span class="owner-name">Owner</span>
					</a>
				</div>
				<a href="Home.html" class="sidebar-link active"> <i
					class="fa fa-home"></i> <span class="link-text">Home</span>
				</a> <a href="#" class="sidebar-link"> <i class="fa fa-chart-bar"></i>
					<span class="link-text">Analytics</span>
				</a> <a href="Product.jsp" class="sidebar-link"> <i
					class="fa fa-shopping-bag"></i> <span class="link-text">Products</span>
				</a> <a href="Retailer.jsp" class="sidebar-link"> <i
					class="fa fa-users"></i> <span class="link-text">Retailer</span> <a
					href="Order.jsp" class="sidebar-link"> <i
						class="fa fa-shopping-cart"></i> <span class="link-text">Orders</span>
				</a>

				</a> <a href="#" class="sidebar-link"> <i class="fa fa-file-invoice"></i>
					<span class="link-text">Billing</span>
				</a> <a href="logout.jsp" class="sidebar-link"> <i
					class="fa fa-sign-out-alt"></i> <span class="link-text">Logout</span>
				</a>

			</div>
		</div>
		<link
			href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
			rel="stylesheet" />
		<script
			src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>



		<!-- ...navigation/sidebar code above remains unchanged... -->

		<div class="container mt-5">
			<h1>Orders</h1>
			<!-- Button to trigger the Create Order modal -->
			<button type="button" class="btn btn-primary mb-3"
				data-bs-toggle="modal" data-bs-target="#orderModal">Create
				Order</button>

			<!-- Order Modal -->
			<div class="modal fade" id="orderModal" tabindex="-1"
				aria-labelledby="orderModalLabel" aria-hidden="true">
				<div class="modal-dialog modal-xl">
					<div class="modal-content">
						<form id="orderForm" action="SaveOrderServlet" method="post"
							onsubmit="return prepareOrderItems()">
							<div class="modal-header">
								<h5 class="modal-title" id="orderModalLabel">Create Order</h5>
								<button type="button" class="btn-close" data-bs-dismiss="modal"
									aria-label="Close"></button>
							</div>
							<div class="modal-body">
								<!-- Retailer Selection -->
								<div class="mb-3">
									<label for="retailerName" class="form-label">Retailer</label> <select
										class="form-select" name="retailerId" required>
										<option value="" disabled selected>Select Retailer</option>
										<%
                            try {
                                Class.forName("com.mysql.cj.jdbc.Driver");
                                Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3307/inventory", "root", "");
                                PreparedStatement ps = conn.prepareStatement("SELECT * FROM retailers");
                                ResultSet rs = ps.executeQuery();
                                while (rs.next()) {
                            %>
										<option value="<%=rs.getInt("retailer_id")%>"><%=rs.getString("retailer_name")%></option>
										<%
                                }
                                rs.close();
                                ps.close();
                                conn.close();
                            } catch(Exception e) {
                                out.print("<option disabled>Error loading retailers</option>");
                                e.printStackTrace();
                            }
                            %>
									</select>
								</div>

								<!-- Customer Name -->
								<div class="mb-3">
									<label for="customerName" class="form-label">Customer
										Name</label> <input type="text" class="form-control" id="customerName"
										name="customerName" required />
								</div>

								<!-- Product Selection -->
								<div class="row align-items-end">
									<div class="col-md-4">
										<label class="form-label">Select Product</label> <select
											class="form-select" id="productSelect">
											<option value="" disabled selected>Choose Product</option>
											<%
                                try {
                                    Class.forName("com.mysql.cj.jdbc.Driver");
                                    Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3307/inventory", "root", "");
                                    PreparedStatement ps = conn.prepareStatement("SELECT * FROM products");
                                    ResultSet rs = ps.executeQuery();
                                    while (rs.next()) {
                                %>
											<option value="<%=rs.getInt("product_id")%>"
												data-name="<%=rs.getString("product_name")%>"
												data-price="<%=rs.getDouble("unit_price")%>">
												<%=rs.getString("product_name")%>
											</option>
											<%
                                    }
                                    rs.close();
                                    ps.close();
                                    conn.close();
                                } catch (Exception e) {
                                    out.print("<option disabled>Error loading products</option>");
                                    e.printStackTrace();
                                }
                                %>
										</select>
									</div>
									<div class="col-md-2">
										<label class="form-label">Unit Price</label> <input
											type="number" id="unitPrice" class="form-control" readonly />
									</div>
									<div class="col-md-2">
										<label class="form-label">Quantity</label> <input
											type="number" id="quantity" class="form-control" min="1"
											value="1" />
									</div>
									<div class="col-md-2">
										<button type="button" class="btn btn-success"
											onclick="addProduct()">Add</button>
									</div>
								</div>

								<!-- Product Table -->
								<hr />
								<table class="table table-bordered mt-3" id="productTable">
									<thead>
										<tr>
											<th>Product ID</th>
											<th>Name</th>
											<th>Qty</th>
											<th>Unit Price</th>
											<th>Total</th>
											<th>Action</th>
										</tr>
									</thead>
									<tbody></tbody>
								</table>

								<!-- Subtotal -->
								<div class="text-end me-3">
									<h5>
										Subtotal: ₹<span id="subTotal">0.00</span>
									</h5>
								</div>

								<input type="hidden" name="orderItemsJson" id="orderItemsJson" />
							</div>
							<div class="modal-footer">
								<button type="submit" class="btn btn-primary">Submit
									Order</button>
							</div>
						</form>
					</div>
				</div>
			</div>
			<!-- End Modal -->
		</div>

		<!-- Bootstrap JS Bundle -->
		<script
			src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

		<!-- JavaScript for Order Handling -->
		<script>
const productSelect = document.getElementById('productSelect');
const unitPriceInput = document.getElementById('unitPrice');
const quantityInput = document.getElementById('quantity');
const productTableBody = document.querySelector('#productTable tbody');
const orderItemsJsonInput = document.getElementById('orderItemsJson');

let orderItems = [];

// Update unit price when product changes
productSelect.addEventListener('change', () => {
    const selectedOption = productSelect.options[productSelect.selectedIndex];
    unitPriceInput.value = selectedOption.getAttribute('data-price') || 0;
    quantityInput.value = 1;
});

// Add product to table and orderItems array
function addProduct() {
    const productId = productSelect.value;
    if (!productId) {
        alert('Please select a product.');
        return;
    }
    const productName = productSelect.options[productSelect.selectedIndex].text;
    const unitPrice = parseFloat(unitPriceInput.value);
    const quantity = parseInt(quantityInput.value);

    if (quantity < 1 || isNaN(quantity)) {
        alert('Please enter a valid quantity.');
        return;
    }

    // Check if product already added
    const existingIndex = orderItems.findIndex(item => item.productId == productId);
    if (existingIndex > -1) {
        orderItems[existingIndex].quantity += quantity;
    } else {
        orderItems.push({ productId, productName, unitPrice, quantity });
    }

    renderOrderTable();
}

// Render order items in table
function renderOrderTable() {
    productTableBody.innerHTML = '';
    orderItems.forEach((item, index) => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${item.productId}</td>
            <td>${item.productName}</td>
            <td>${item.quantity}</td>
            <td>${item.unitPrice.toFixed(2)}</td>
            <td>${(item.unitPrice * item.quantity).toFixed(2)}</td>
            <td><button type="button" class="btn btn-danger btn-sm" onclick="removeProduct(${index})">Remove</button></td>
        `;
        productTableBody.appendChild(row);
    });
}

// Remove product from orderItems
function removeProduct(index) {
    orderItems.splice(index, 1);
    renderOrderTable();
}

// Before form submit, prepare JSON of order items
function prepareOrderItems() {
    if (orderItems.length === 0) {
        alert('Please add at least one product to the order.');
        return false;
    }
    orderItemsJsonInput.value = JSON.stringify(orderItems);
    return true;
}

// Reset modal when closed
document.getElementById('orderModal').addEventListener('hidden.bs.modal', () => {
    document.getElementById('orderForm').reset();
    orderItems = [];
    renderOrderTable();
    unitPriceInput.value = '';
    
});
</script>
</body>
</html>