<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ page import="java.sql.*" %>
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Create Order</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  <div class="container mt-5">
    <h2>Create Order</h2>
    <form action="SaveOrder.jsp" method="post" id="orderForm">
      
      
      <!-- Product Dropdown -->
      <div class="mb-3">
        <label for="product" class="form-label">Select Product:</label>
        <select class="form-control" id="product">
          <option value="" disabled selected>Choose a Product</option>
          <%
            try {
              Class.forName("com.mysql.jdbc.Driver");
              Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3307/inventory", "root", "");
              Statement stmt = con.createStatement();
              ResultSet rs = stmt.executeQuery("SELECT product_id, product_name, unit_price FROM products");
              while(rs.next()){
          %>
          <option value="<%= rs.getInt("product_id") %>"
                  data-name="<%= rs.getString("product_name") %>"
                  data-price="<%= rs.getDouble("unit_price") %>">
            <%= rs.getString("product_name") %>
          </option>
          <%
              }
              con.close();
            } catch(Exception e) {
              out.println("Error loading products: " + e.getMessage());
            }
          %>
        </select>
      </div>

      <!-- Unit Price (with 12% margin) and Quantity Inputs -->
      <div class="row mb-3">
        <div class="col-md-6">
          <label for="price" class="form-label">Unit Price (with 12% margin):</label>
          <input type="number" class="form-control" id="price" readonly>
        </div>
        <div class="col-md-6">
          <label for="quantity" class="form-label">Quantity:</label>
          <input type="number" class="form-control" id="quantity">
        </div>
      </div>

      <!-- Button to add product to order list -->
      <button type="button" class="btn btn-success mb-3" onclick="addProduct()">Add Product</button>
      
      <!-- Order Product List Table -->
      <table class="table table-bordered" id="productTable">
        <thead>
          <tr>
            <th>Product</th>
            <th>Unit Price</th>
            <th>Quantity</th>
            <th>Subtotal</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody>
        </tbody>
      </table>

      <!-- Total Order Amount -->
      <div class="mb-3">
        <h5>Total: ₹ <span id="total">0.00</span></h5>
      </div>
      
      <!-- Hidden field to pass the full product order as a JSON string (optional) -->
      <input type="hidden" name="orderData" id="orderData">
      
      <!-- Submit Order Button -->
      <button type="submit" class="btn btn-primary">Submit Order</button>
    </form>
  </div>
  
  <!-- Bootstrap Bundle JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  
  <!-- JavaScript for Dynamic Order Creation -->
  <script>
    let orderProducts = [];
    let totalAmount = 0;

    // When a product is selected, calculate and display the price including 12% margin.
    document.getElementById('product').addEventListener('change', function() {
      const selectedOption = this.options[this.selectedIndex];
      const basePrice = parseFloat(selectedOption.getAttribute('data-price'));
      if (!isNaN(basePrice)) {
        // Calculate price with 12% margin.
        const unitPrice = basePrice * 1.12;
        document.getElementById('price').value = unitPrice.toFixed(2);
      } else {
        document.getElementById('price').value = "";
      }
    });

    // Function to add a product to the order
    function addProduct() {
      const productSelect = document.getElementById('product');
      const selectedOption = productSelect.options[productSelect.selectedIndex];
      if (productSelect.value === "") {
        alert("Please select a product.");
        return;
      }
      
      const productId = productSelect.value;
      const productName = selectedOption.getAttribute('data-name');
      const unitPrice = parseFloat(document.getElementById('price').value);
      const quantity = parseInt(document.getElementById('quantity').value);

      if (isNaN(unitPrice) || isNaN(quantity) || quantity <= 0) {
        alert("Please enter a valid quantity.");
        return;
      }

      const subtotal = unitPrice * quantity;
      totalAmount += subtotal;

      // Add product details to our orderProducts array
      orderProducts.push({
        productId: productId,
        productName: productName,
        unitPrice: unitPrice,
        quantity: quantity,
        subtotal: subtotal
      });
      
      // Add a new row to the products table
      const tableBody = document.getElementById('productTable').getElementsByTagName('tbody')[0];
      const newRow = tableBody.insertRow();
      newRow.innerHTML = `
        <td>${productName} <input type="hidden" name="productId[]" value="${productId}"></td>
        <td>₹${unitPrice.toFixed(2)} <input type="hidden" name="unitPrice[]" value="${unitPrice.toFixed(2)}"></td>
        <td>${quantity} <input type="hidden" name="quantity[]" value="${quantity}"></td>
        <td>₹${subtotal.toFixed(2)} <input type="hidden" name="subtotal[]" value="${subtotal.toFixed(2)}"></td>
        <td><button type="button" class="btn btn-danger btn-sm" onclick="removeProduct(this, ${subtotal})">Remove</button></td>
      `;
      
      // Update the total display
      document.getElementById('total').innerText = totalAmount.toFixed(2);
      
      // Update the hidden JSON field with the current product list
      document.getElementById('orderData').value = JSON.stringify(orderProducts);
      
      // Reset selections for the next product
      productSelect.selectedIndex = 0;
      document.getElementById('price').value = "";
      document.getElementById('quantity').value = "";
    }

    // Function to remove a product from the order list
    function removeProduct(button, itemSubtotal) {
      // Remove the table row
      const row = button.parentNode.parentNode;
      row.parentNode.removeChild(row);

      // Adjust the total amount
      totalAmount -= itemSubtotal;
      document.getElementById('total').innerText = totalAmount.toFixed(2);

      // Rebuild the orderProducts array by reading the table rows again
      orderProducts = [];
      const rows = document.getElementById('productTable').getElementsByTagName('tbody')[0].rows;
      for (let i = 0; i < rows.length; i++) {
        const cells = rows[i].cells;
        const prodId = cells[0].querySelector("input[name='productId[]']").value;
        const priceVal = parseFloat(cells[1].querySelector("input[name='unitPrice[]']").value);
        const qty = parseInt(cells[2].querySelector("input[name='quantity[]']").value);
        const subVal = parseFloat(cells[3].querySelector("input[name='subtotal[]']").value);
        // Use the displayed product name (trim extra whitespace)
        const prodName = cells[0].textContent.trim();
        orderProducts.push({
          productId: prodId,
          productName: prodName,
          unitPrice: priceVal,
          quantity: qty,
          subtotal: subVal
        });
      }
      
      // Update the hidden JSON field
      document.getElementById('orderData').value = JSON.stringify(orderProducts);
    }
  </script>
</body>
</html>
