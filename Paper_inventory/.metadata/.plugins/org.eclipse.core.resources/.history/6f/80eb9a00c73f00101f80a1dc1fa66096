import java.io.IOException;
import java.sql.*;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.*;

@WebServlet("/SaveOrderServlet")
public class SaveOrderServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        int retailerId = Integer.parseInt(request.getParameter("retailerId"));
        String customerName = request.getParameter("customerName");

        String[] productIds = request.getParameterValues("productId[]");
        String[] unitPrices = request.getParameterValues("unitPrice[]");
        String[] quantities = request.getParameterValues("quantity[]");
        String[] subtotals = request.getParameterValues("subtotal[]");

        Connection conn = null;
        PreparedStatement psOrder = null;
        PreparedStatement psItem = null;
        ResultSet rs = null;

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3307/inventory", "root", "");

            // 1. Insert into orders table
            String sqlOrder = "INSERT INTO orders (retailer_id, customer_name, order_date) VALUES (?, ?, NOW())";
            psOrder = conn.prepareStatement(sqlOrder, Statement.RETURN_GENERATED_KEYS);
            psOrder.setInt(1, retailerId);
            psOrder.setString(2, customerName);
            psOrder.executeUpdate();

            rs = psOrder.getGeneratedKeys();
            int orderId = 0;
            if (rs.next()) {
                orderId = rs.getInt(1);
            }

            // 2. Insert each item into order_items
            String sqlItem = "INSERT INTO order_items (order_id, product_id, quantity, unit_price, subtotal) VALUES (?, ?, ?, ?, ?)";
            psItem = conn.prepareStatement(sqlItem);

            for (int i = 0; i < productIds.length; i++) {
                psItem.setInt(1, orderId);
                psItem.setInt(2, Integer.parseInt(productIds[i]));
                psItem.setInt(3, Integer.parseInt(quantities[i]));
                psItem.setDouble(4, Double.parseDouble(unitPrices[i]));
                psItem.setDouble(5, Double.parseDouble(subtotals[i]));
                psItem.addBatch();
            }

            psItem.executeBatch();

            // Success message and redirect
            response.sendRedirect("OrderSuccess.jsp");
        } catch (Exception e) {
            e.printStackTrace();
            response.getWriter().println("Error saving order: " + e.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (psOrder != null) psOrder.close();
                if (psItem != null) psItem.close();
                if (conn != null) conn.close();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }
}
