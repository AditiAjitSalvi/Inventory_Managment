<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@page import="java.sql.PreparedStatement"%>
<%@page import="java.sql.DriverManager"%>
<%@page import="com.mysql.cj.jdbc.Driver"%>
<%@page import="java.sql.ResultSet"%>
<%@page import="java.sql.Statement"%>
<%@page import="java.sql.Connection"%>
<%
    // Get form parameters
    String retailerId = request.getParameter("retailerId");
    String customerName = request.getParameter("customerName");
    String[] productIds = request.getParameterValues("productId[]");
    String[] unitPrices = request.getParameterValues("unitPrice[]");
    String[] quantities = request.getParameterValues("quantity[]");
    String[] subtotals = request.getParameterValues("subtotal[]");

    if (retailerId == null || productIds == null) {
        out.println("Missing order data.");
        return;
    }

    Connection con = null;
    PreparedStatement psOrder = null;
    PreparedStatement psOrderItems = null;
    ResultSet rs = null;

    try {
        Class.forName("com.mysql.jdbc.Driver");
        con = DriverManager.getConnection("jdbc:mysql://localhost:3307/inventory", "root", "");

        // Disable auto-commit for transaction management
        con.setAutoCommit(false);

        // Insert order record into 'orders' table
        String orderSql = "INSERT INTO orders (retailer_id, customer_name, order_date) VALUES (?, ?, NOW())";
        psOrder = con.prepareStatement(orderSql, Statement.RETURN_GENERATED_KEYS);
        psOrder.setInt(1, Integer.parseInt(retailerId));
        psOrder.setString(2, customerName);
        int orderResult = psOrder.executeUpdate();

        if (orderResult == 0) {
            throw new Exception("Failed to insert order.");
        }

        // Get the generated order id
        rs = psOrder.getGeneratedKeys();
        int orderId = 0;
        if (rs.next()) {
            orderId = rs.getInt(1);
        } else {
            throw new Exception("Failed to retrieve order ID.");
        }

        // Insert order items
        String orderItemsSql = "INSERT INTO order_items (order_id, product_id, unit_price, quantity, subtotal) VALUES (?, ?, ?, ?, ?)";
        psOrderItems = con.prepareStatement(orderItemsSql);

        for (int i = 0; i < productIds.length; i++) {
            psOrderItems.setInt(1, orderId);
            psOrderItems.setInt(2, Integer.parseInt(productIds[i]));
            psOrderItems.setDouble(3, Double.parseDouble(unitPrices[i]));
            psOrderItems.setInt(4, Integer.parseInt(quantities[i]));
            psOrderItems.setDouble(5, Double.parseDouble(subtotals[i]));
            psOrderItems.addBatch();
        }

        psOrderItems.executeBatch();

        // Commit transaction
        con.commit();

        out.println("<h3>Order saved successfully! Order ID: " + orderId + "</h3>");
        out.println("<a href='Order.jsp'>Place another order</a>");

    } catch (Exception e) {
        if (con != null) {
            try {
                con.rollback();  // rollback if error occurs
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        out.println("Error saving order: " + e.getMessage());
    } finally {
        try { if (rs != null) rs.close(); } catch (Exception e) {}
        try { if (psOrder != null) psOrder.close(); } catch (Exception e) {}
        try { if (psOrderItems != null) psOrderItems.close(); } catch (Exception e) {}
        try { if (con != null) con.close(); } catch (Exception e) {}
    }
%>
