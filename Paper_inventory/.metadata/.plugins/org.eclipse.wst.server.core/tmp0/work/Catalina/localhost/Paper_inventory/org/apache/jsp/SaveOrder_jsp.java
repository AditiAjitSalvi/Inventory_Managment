/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.12
 * Generated at: 2025-06-02 16:30:42 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.text.SimpleDateFormat;
import java.io.StringWriter;
import java.io.PrintWriter;
import java.sql.*;
import com.mysql.cj.jdbc.Driver;

public final class SaveOrder_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

// Generate unique IDs with prefix + timestamp + 3 random digits
	public String generateUniqueId(String prefix) {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmssSSS");
		String dateTime = sdf.format(new java.util.Date());
		int random = (int) (Math.random() * 900) + 100;
		return prefix + dateTime + random;
	}
  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("com.mysql.cj.jdbc.Driver");
    _jspx_imports_classes.add("java.io.StringWriter");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Order Page</title>\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	");

	String[] productIds = request.getParameterValues("productId[]");
	String[] unitPrices = request.getParameterValues("unitPrice[]");
	String[] quantities = request.getParameterValues("quantity[]");
	String[] subtotals = request.getParameterValues("subtotal[]");
	int retailerId = Integer.parseInt(request.getParameter("retailerId"));
	String customerName = request.getParameter("customerName");

	
	String retailerParam = request.getParameter("retailerId");
	if (retailerParam != null && !retailerParam.trim().isEmpty()) {
	    retailerId = Integer.parseInt(retailerParam.trim()); 
	} else {
	    out.println("<script>alert('Retailer ID is missing!'); window.history.back();</script>");
	    return;
	}

	// Later in PreparedStatement
	 
	if (productIds == null || productIds.length == 0) {
		out.println("<script>alert('No products selected!'); window.history.back();</script>");
		return;
	}

	Connection con = null;
	PreparedStatement psOrder = null, psOrderItem = null, psUpdateStock = null;
	PreparedStatement psInsertBilling = null, psUpdateBillingId = null, psUpdateTotal = null;

	double totalAmount = 0.0;

	try {
		Class.forName("com.mysql.cj.jdbc.Driver");
		// Change URL/user/password as per your setup
		con = DriverManager.getConnection("jdbc:mysql://localhost:3307/inventory", "root", "");
		con.setAutoCommit(false); // Start transaction

		String orderId = generateUniqueId("ORD");
		String billingId = generateUniqueId("BILL");

		// Insert into orders: id, retailer_id, order_date, status, total_amount, billing_id
		String insertOrderSQL = "INSERT INTO orders (id, retailer_id, order_date, status, total_amount, billing_id) VALUES (?, ?, NOW(), 'Pending', 0, NULL)";
		psOrder = con.prepareStatement(insertOrderSQL);
		psOrder.setString(1, orderId);
		psOrder.setInt(2, retailerId);
		psOrder.executeUpdate();

		String insertItem = "INSERT INTO order_items (id, order_id, product_id, quantity, unit_price, subtotal) VALUES (?, ?, ?, ?, ?, ?)";
		psOrderItem = con.prepareStatement(insertItem);

		psUpdateStock = con
		.prepareStatement("UPDATE products SET quantity_in_stock = quantity_in_stock - ? WHERE product_id = ?");

		for (int i = 0; i < productIds.length; i++) {
			if (productIds[i] == null || productIds[i].trim().isEmpty() || quantities[i] == null
			|| quantities[i].trim().isEmpty() || unitPrices[i] == null || unitPrices[i].trim().isEmpty()
			|| subtotals[i] == null || subtotals[i].trim().isEmpty()) {
		continue;
			}

			String orderItemId = generateUniqueId("ITEM");
			int pid = Integer.parseInt(productIds[i].trim());
			int qty = Integer.parseInt(quantities[i].trim());
			double price = Double.parseDouble(unitPrices[i].trim());
			double subtotal = Double.parseDouble(subtotals[i].trim());

			totalAmount += subtotal;

			psOrderItem.setString(1, orderItemId);
			psOrderItem.setString(2, orderId);
			psOrderItem.setInt(3, pid);
			psOrderItem.setInt(4, qty);
			psOrderItem.setDouble(5, price);
			psOrderItem.setDouble(6, subtotal);
			psOrderItem.executeUpdate();

			psUpdateStock.setInt(1, qty);
			psUpdateStock.setInt(2, pid);
			psUpdateStock.executeUpdate();
		}

		// Update total_amount in orders table
		String updateTotalSQL = "UPDATE orders SET total_amount = ? WHERE id = ?";
		psUpdateTotal = con.prepareStatement(updateTotalSQL);
		psUpdateTotal.setDouble(1, totalAmount);
		psUpdateTotal.setString(2, orderId);
		psUpdateTotal.executeUpdate();

		// Insert billing info (assuming billing table exists with id, order_id, billing_date, amount)
		String insertBillingSQL = "INSERT INTO billing (id, order_id, billing_date, amount) VALUES (?, ?, NOW(), ?)";
		psInsertBilling = con.prepareStatement(insertBillingSQL);
		psInsertBilling.setString(1, billingId);
		psInsertBilling.setString(2, orderId);
		psInsertBilling.setDouble(3, totalAmount);
		psInsertBilling.executeUpdate();

		// Update orders table to set billing_id
		String updateBillingIdSQL = "UPDATE orders SET billing_id = ? WHERE id = ?";
		psUpdateBillingId = con.prepareStatement(updateBillingIdSQL);
		psUpdateBillingId.setString(1, billingId);
		psUpdateBillingId.setString(2, orderId);
		psUpdateBillingId.executeUpdate();

		con.commit();

		out.println(
		"<script>alert('Order placed and billing generated successfully!'); window.location='Order.jsp';</script>");

	} catch (Exception e) {
		if (con != null) {
			try {
		con.rollback();
			} catch (SQLException ex) {
		out.println("<pre>Error during rollback: " + ex.getMessage() + "</pre>");
			}
		}
		out.println("<pre>Error: " + e.getMessage() + "</pre>");
		StringWriter sw = new StringWriter();
		e.printStackTrace(new PrintWriter(sw));
		out.println("<pre>" + sw.toString() + "</pre>");
	} finally {
		try {
			if (psOrder != null)
		psOrder.close();
			if (psOrderItem != null)
		psOrderItem.close();
			if (psUpdateStock != null)
		psUpdateStock.close();
			if (psInsertBilling != null)
		psInsertBilling.close();
			if (psUpdateBillingId != null)
		psUpdateBillingId.close();
			if (psUpdateTotal != null)
		psUpdateTotal.close();
			if (con != null)
		con.close();
		} catch (SQLException ex) {
			out.println("<pre>Error closing resources: " + ex.getMessage() + "</pre>");
		}
	}
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
