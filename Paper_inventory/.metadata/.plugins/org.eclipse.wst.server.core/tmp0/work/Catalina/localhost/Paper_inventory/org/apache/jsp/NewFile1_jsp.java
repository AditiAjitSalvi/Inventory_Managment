/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.12
 * Generated at: 2025-06-02 13:13:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;

public final class NewFile1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>Order Page</title>\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <!-- Bootstrap CSS -->\r\n");
      out.write("    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("    <!-- Font Awesome -->\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css\">\r\n");
      out.write("\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            background-color: #f8f9fa;\r\n");
      out.write("        }\r\n");
      out.write("        .container {\r\n");
      out.write("            margin-top: 2rem;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("    <h2>Place Order</h2>\r\n");
      out.write("    <form action=\"SaveOrderServlet\" method=\"post\">\r\n");
      out.write("\r\n");
      out.write("        <!-- Retailer Dropdown -->\r\n");
      out.write("        <div class=\"form-group mb-3\">\r\n");
      out.write("            <label for=\"retailer\">Select Retailer:</label>\r\n");
      out.write("            <select class=\"form-control\" id=\"retailer\" name=\"retailerId\" required onchange=\"setCustomerFromRetailer()\">\r\n");
      out.write("                <option value=\"\" disabled selected>Choose Retailer</option>\r\n");
      out.write("                ");

                    try {
                        Class.forName("com.mysql.jdbc.Driver");
                        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3307/inventory", "root", "");
                        Statement stmt = con.createStatement();
                        ResultSet rs = stmt.executeQuery("SELECT id, name, contact_name FROM retailers");
                        while (rs.next()) {
                
      out.write("\r\n");
      out.write("                <option value=\"");
      out.print(rs.getInt("id"));
      out.write("\" data-contact=\"");
      out.print(rs.getString("contact_name"));
      out.write("\">\r\n");
      out.write("                    ");
      out.print(rs.getString("name"));
      out.write("\r\n");
      out.write("                </option>\r\n");
      out.write("                ");

                        }
                        con.close();
                    } catch (Exception e) {
                        out.println("Error loading retailers.");
                    }
                
      out.write("\r\n");
      out.write("            </select>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <!-- Auto-filled Customer Contact Name -->\r\n");
      out.write("        <div class=\"form-group mb-3\">\r\n");
      out.write("            <label for=\"customer\">Customer Contact Name:</label>\r\n");
      out.write("            <input type=\"text\" class=\"form-control\" id=\"customer\" name=\"customerName\" readonly />\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <!-- Product Dropdown -->\r\n");
      out.write("        <div class=\"form-group mb-3\">\r\n");
      out.write("            <label for=\"product\">Select Product:</label>\r\n");
      out.write("            <select class=\"form-control\" id=\"product\">\r\n");
      out.write("                ");

                    try {
                        Class.forName("com.mysql.jdbc.Driver");
                        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3307/inventory", "root", "");
                        Statement stmt = con.createStatement();
                        ResultSet rs = stmt.executeQuery("SELECT product_id, product_name FROM products");
                        while (rs.next()) {
                
      out.write("\r\n");
      out.write("                <option value=\"");
      out.print(rs.getInt("product_id"));
      out.write('"');
      out.write('>');
      out.print(rs.getString("product_name"));
      out.write("</option>\r\n");
      out.write("                ");

                        }
                        con.close();
                    } catch (Exception e) {
                        out.println("Error loading products.");
                    }
                
      out.write("\r\n");
      out.write("            </select>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <!-- Price and Quantity Inputs -->\r\n");
      out.write("        <div class=\"form-group mb-3\">\r\n");
      out.write("            <label for=\"price\">Unit Price:</label>\r\n");
      out.write("            <input type=\"number\" class=\"form-control\" id=\"price\" step=\"0.01\">\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"form-group mb-3\">\r\n");
      out.write("            <label for=\"quantity\">Quantity:</label>\r\n");
      out.write("            <input type=\"number\" class=\"form-control\" id=\"quantity\">\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <button type=\"button\" class=\"btn btn-success mb-3\" onclick=\"addProduct()\">Add Product</button>\r\n");
      out.write("\r\n");
      out.write("        <!-- Product Table -->\r\n");
      out.write("        <table class=\"table table-bordered\" id=\"productTable\">\r\n");
      out.write("            <thead>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <th>Product</th>\r\n");
      out.write("                <th>Unit Price</th>\r\n");
      out.write("                <th>Quantity</th>\r\n");
      out.write("                <th>Subtotal</th>\r\n");
      out.write("            </tr>\r\n");
      out.write("            </thead>\r\n");
      out.write("            <tbody>\r\n");
      out.write("            <!-- JS will populate rows -->\r\n");
      out.write("            </tbody>\r\n");
      out.write("        </table>\r\n");
      out.write("\r\n");
      out.write("        <!-- Total -->\r\n");
      out.write("        <div class=\"form-group\">\r\n");
      out.write("            <h5>Total: ₹ <span id=\"total\">0.00</span></h5>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <!-- Submit -->\r\n");
      out.write("        <button type=\"submit\" class=\"btn btn-primary\">Submit Order</button>\r\n");
      out.write("    </form>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<!-- Bootstrap JS -->\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    function setCustomerFromRetailer() {\r\n");
      out.write("        var retailerSelect = document.getElementById(\"retailer\");\r\n");
      out.write("        var selectedOption = retailerSelect.options[retailerSelect.selectedIndex];\r\n");
      out.write("        var contactName = selectedOption.getAttribute(\"data-contact\");\r\n");
      out.write("        document.getElementById(\"customer\").value = contactName;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("   \r\n");
      out.write("	let totalAmount = 0;\r\n");
      out.write("\r\n");
      out.write("	function addProduct() {\r\n");
      out.write("		const productDropdown = document.getElementById(\"product\");\r\n");
      out.write("		const selectedOption = productDropdown.options[productDropdown.selectedIndex];\r\n");
      out.write("		const productName = selectedOption.text;\r\n");
      out.write("		const productId = selectedOption.value;\r\n");
      out.write("\r\n");
      out.write("		const priceInput = document.getElementById(\"price\");\r\n");
      out.write("		const quantityInput = document.getElementById(\"quantity\");\r\n");
      out.write("\r\n");
      out.write("		const price = parseFloat(priceInput.value);\r\n");
      out.write("		const quantity = parseInt(quantityInput.value);\r\n");
      out.write("\r\n");
      out.write("		if (!price || !quantity || price <= 0 || quantity <= 0) {\r\n");
      out.write("			alert(\"Please enter valid price and quantity\");\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		const subtotal = price * quantity;\r\n");
      out.write("		totalAmount += subtotal;\r\n");
      out.write("\r\n");
      out.write("		// Add row to table\r\n");
      out.write("		const tableBody = document.getElementById(\"productTable\").getElementsByTagName(\"tbody\")[0];\r\n");
      out.write("		const newRow = tableBody.insertRow();\r\n");
      out.write("\r\n");
      out.write("		const productCell = newRow.insertCell(0);\r\n");
      out.write("		const priceCell = newRow.insertCell(1);\r\n");
      out.write("		const quantityCell = newRow.insertCell(2);\r\n");
      out.write("		const subtotalCell = newRow.insertCell(3);\r\n");
      out.write("\r\n");
      out.write("		productCell.innerText = productName;\r\n");
      out.write("		priceCell.innerText = price.toFixed(2);\r\n");
      out.write("		quantityCell.innerText = quantity;\r\n");
      out.write("		subtotalCell.innerText = subtotal.toFixed(2);\r\n");
      out.write("\r\n");
      out.write("		// Update total amount\r\n");
      out.write("		document.getElementById(\"total\").innerText = totalAmount.toFixed(2);\r\n");
      out.write("\r\n");
      out.write("		// Optional: clear fields\r\n");
      out.write("		priceInput.value = \"\";\r\n");
      out.write("		quantityInput.value = \"\";\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
