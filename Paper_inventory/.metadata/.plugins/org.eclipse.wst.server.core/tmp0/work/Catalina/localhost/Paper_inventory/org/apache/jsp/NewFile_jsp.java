/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.12
 * Generated at: 2025-06-04 14:18:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;
import java.sql.DriverManager;
import com.mysql.cj.jdbc.Driver;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Connection;

public final class NewFile_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.mysql.cj.jdbc.Driver");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.sql.Statement");
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<title>Create Purchase Order</title>\r\n");
      out.write("<!-- Bootstrap CSS -->\r\n");
      out.write("<link\r\n");
      out.write("	href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\"\r\n");
      out.write("	rel=\"stylesheet\">\r\n");
      out.write("<!-- Font Awesome for icons -->\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css\">\r\n");
      out.write("<!-- Custom CSS -->\r\n");
      out.write("<style>\r\n");
      out.write("/* Main Layout */\r\n");
      out.write("body {\r\n");
      out.write("	margin: 0;\r\n");
      out.write("	padding: 0;\r\n");
      out.write("	background-color: #f8f9fa;\r\n");
      out.write("	font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".dashboard-container {\r\n");
      out.write("	display: flex;\r\n");
      out.write("	min-height: 100vh;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Sidebar Styles */\r\n");
      out.write(".sidebar {\r\n");
      out.write("	width: 240px;\r\n");
      out.write("	background-color: #3b82f6; /* Blue 600 equivalent */\r\n");
      out.write("	color: white;\r\n");
      out.write("	transition: all 0.3s ease-in-out;\r\n");
      out.write("	display: flex;\r\n");
      out.write("	flex-direction: column;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".sidebar.collapsed {\r\n");
      out.write("	width: 64px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".sidebar-header {\r\n");
      out.write("	display: flex;\r\n");
      out.write("	justify-content: space-between;\r\n");
      out.write("	align-items: center;\r\n");
      out.write("	padding: 16px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".sidebar-title {\r\n");
      out.write("	font-size: 1.25rem;\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("	margin: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".sidebar-toggle {\r\n");
      out.write("	background: transparent;\r\n");
      out.write("	border: none;\r\n");
      out.write("	color: white;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("	padding: 8px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".sidebar-toggle:hover {\r\n");
      out.write("	background-color: rgba(255, 255, 255, 0.1);\r\n");
      out.write("	border-radius: 4px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".sidebar-menu {\r\n");
      out.write("	display: flex;\r\n");
      out.write("	flex-direction: column;\r\n");
      out.write("	padding-top: 16px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".sidebar-link {\r\n");
      out.write("	display: flex;\r\n");
      out.write("	align-items: center;\r\n");
      out.write("	padding: 12px 16px;\r\n");
      out.write("	text-decoration: none;\r\n");
      out.write("	color: white;\r\n");
      out.write("	margin: 4px 0;\r\n");
      out.write("	transition: background-color 0.2s;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".sidebar-link:hover {\r\n");
      out.write("	background-color: #2563eb; /* Blue 700 equivalent */\r\n");
      out.write("	color: white;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".sidebar-link.active {\r\n");
      out.write("	background-color: #1d4ed8; /* Blue 800 equivalent */\r\n");
      out.write("	color: white;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".sidebar-link i {\r\n");
      out.write("	font-size: 1.25rem;\r\n");
      out.write("	width: 20px;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".sidebar-link .link-text {\r\n");
      out.write("	margin-left: 12px;\r\n");
      out.write("	white-space: nowrap;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".sidebar.collapsed .sidebar-title, .sidebar.collapsed .link-text {\r\n");
      out.write("	display: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Main Content */\r\n");
      out.write(".main-content {\r\n");
      out.write("	flex: 1;\r\n");
      out.write("	padding: 24px;\r\n");
      out.write("	overflow-y: auto;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Stat Cards */\r\n");
      out.write(".stat-card {\r\n");
      out.write("	border-radius: 8px;\r\n");
      out.write("	border: 1px solid rgba(0, 0, 0, 0.125);\r\n");
      out.write("	box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".stat-icon {\r\n");
      out.write("	font-size: 1.25rem;\r\n");
      out.write("	color: #6b7280; /* Text muted equivalent */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".stat-title {\r\n");
      out.write("	font-size: 0.875rem;\r\n");
      out.write("	color: #6b7280; /* Text muted equivalent */\r\n");
      out.write("	margin-bottom: 4px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".stat-value {\r\n");
      out.write("	font-size: 1.5rem;\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("	margin: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Chart Container */\r\n");
      out.write(".chart-container {\r\n");
      out.write("	height: 320px;\r\n");
      out.write("	width: 100%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Product Visualization */\r\n");
      out.write(".product-visualization {\r\n");
      out.write("	height: 256px;\r\n");
      out.write("	background-color: #312e81; /* Indigo 950 equivalent */\r\n");
      out.write("	border-radius: 50%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Status Badges */\r\n");
      out.write(".status {\r\n");
      out.write("	padding: 4px 8px;\r\n");
      out.write("	border-radius: 4px;\r\n");
      out.write("	font-size: 0.75rem;\r\n");
      out.write("	font-weight: 500;\r\n");
      out.write("	display: inline-block;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".status.pending {\r\n");
      out.write("	background-color: #fff8e6;\r\n");
      out.write("	color: #d97706; /* Amber 500 equivalent */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".status.urgent {\r\n");
      out.write("	background-color: #fef2f2;\r\n");
      out.write("	color: #ef4444; /* Red 500 equivalent */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".status.completed {\r\n");
      out.write("	background-color: #ecfdf5;\r\n");
      out.write("	color: #10b981; /* Green 500 equivalent */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Orders Page Styles */\r\n");
      out.write(".orders-container {\r\n");
      out.write("	max-width: 100%;\r\n");
      out.write("	margin: 0 auto;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".search-wrapper {\r\n");
      out.write("	width: 300px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".order-table {\r\n");
      out.write("	font-size: 0.9rem;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".order-table th {\r\n");
      out.write("	font-weight: 600;\r\n");
      out.write("	color: #4b5563;\r\n");
      out.write("	border-bottom-width: 1px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".order-table td {\r\n");
      out.write("	vertical-align: middle;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".order-table .form-check {\r\n");
      out.write("	margin: 2;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Responsive Adjustments */\r\n");
      out.write("@media ( max-width : 768px) {\r\n");
      out.write("	.sidebar {\r\n");
      out.write("		width: 64px;\r\n");
      out.write("	}\r\n");
      out.write("	.sidebar .sidebar-title, .sidebar .link-text {\r\n");
      out.write("		display: none;\r\n");
      out.write("	}\r\n");
      out.write("	.main-content {\r\n");
      out.write("		padding: 16px;\r\n");
      out.write("	}\r\n");
      out.write("	.orders-container .btn-group {\r\n");
      out.write("		display: flex;\r\n");
      out.write("		flex-direction: column;\r\n");
      out.write("	}\r\n");
      out.write("	.orders-container .btn-group .btn {\r\n");
      out.write("		margin-bottom: 8px;\r\n");
      out.write("		margin-right: 0 !important;\r\n");
      out.write("	}\r\n");
      out.write("	.search-wrapper {\r\n");
      out.write("		width: 100%;\r\n");
      out.write("		margin-bottom: 16px;\r\n");
      out.write("	}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".action-buttons {\r\n");
      out.write("	position: absolute;\r\n");
      out.write("	right: 20px;\r\n");
      out.write("	top: 150px;\r\n");
      out.write("	display: flex;\r\n");
      out.write("	gap: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("@media ( max-width : 992px) {\r\n");
      out.write("	.orders-container .d-flex {\r\n");
      out.write("		flex-direction: column;\r\n");
      out.write("	}\r\n");
      out.write("	.orders-container .d-flex .btn {\r\n");
      out.write("		margin-bottom: 8px;\r\n");
      out.write("	}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".card:hover {\r\n");
      out.write("	transform: translateY(-5px);\r\n");
      out.write("	box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);\r\n");
      out.write("	transition: 0.3s ease;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"dashboard-container\">\r\n");
      out.write("		<div class=\"sidebar\" id=\"sidebar\">\r\n");
      out.write("			<div class=\"sidebar-header\">\r\n");
      out.write("				<h2 class=\"sidebar-title\">Dashboard</h2>\r\n");
      out.write("				<button class=\"btn sidebar-toggle\" id=\"sidebarToggle\">\r\n");
      out.write("					<i class=\"fa fa-bars\"></i>\r\n");
      out.write("				</button>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"sidebar-menu\">\r\n");
      out.write("				<a href=\"Home.jsp\" class=\"sidebar-link active\"><i\r\n");
      out.write("					class=\"fa fa-home\"></i><span class=\"link-text\">Home</span></a> <a\r\n");
      out.write("					href=\"\" class=\"sidebar-link\"><i class=\"fa fa-chart-bar\"></i><span\r\n");
      out.write("					class=\"link-text\">Supplier</span></a> <a href=\"Product.jsp\"\r\n");
      out.write("					class=\"sidebar-link\"><i class=\"fa fa-shopping-bag\"></i><span\r\n");
      out.write("					class=\"link-text\">Products</span></a> <a href=\"Retailer.jsp\"\r\n");
      out.write("					class=\"sidebar-link\"><i class=\"fa fa-users\"></i><span\r\n");
      out.write("					class=\"link-text\">Retailer</span></a> <a href=\"Order.jsp\"\r\n");
      out.write("					class=\"sidebar-link\"><i class=\"fa fa-shopping-cart\"></i><span\r\n");
      out.write("					class=\"link-text\">Orders</span></a> <a href=\"Billing.jsp\"\r\n");
      out.write("					class=\"sidebar-link\"><i class=\"fa fa-file-invoice\"></i><span\r\n");
      out.write("					class=\"link-text\">Billing</span></a> <a href=\"Login.html\"\r\n");
      out.write("					class=\"sidebar-link\"><i class=\"fa fa-sign-out-alt\"></i><span\r\n");
      out.write("					class=\"link-text\">Logout</span></a>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("\r\n");
      out.write("		<div class=\"main-content container mt-5\">\r\n");
      out.write("			<h2>Restock Products</h2>\r\n");
      out.write("			<form action=\"SavePurchase.jsp\" method=\"post\" id=\"purchaseForm\">\r\n");
      out.write("				<div class=\"mb-3\">\r\n");
      out.write("					<label for=\"product\" class=\"form-label\">Select Product:</label> <select\r\n");
      out.write("						class=\"form-control\" id=\"product\" name=\"product\">\r\n");
      out.write("						<option value=\"\" disabled selected>Choose a Product</option>\r\n");
      out.write("						");

						try {
							Class.forName("com.mysql.cj.jdbc.Driver");
							Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3307/inventory", "root", "");
							Statement stmt = con.createStatement();
							ResultSet rs = stmt.executeQuery("SELECT product_id, product_name FROM products");
							while (rs.next()) {
						
      out.write("\r\n");
      out.write("						<option value=\"");
      out.print(rs.getInt("product_id"));
      out.write("\"\r\n");
      out.write("							data-name=\"");
      out.print(rs.getString("product_name"));
      out.write("\">\r\n");
      out.write("							");
      out.print(rs.getString("product_name"));
      out.write("\r\n");
      out.write("						</option>\r\n");
      out.write("						");

						}
						con.close();
						} catch (Exception e) {
						out.println("Error loading products: " + e.getMessage());
						}
						
      out.write("\r\n");
      out.write("					</select>\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				<div class=\"mb-3\">\r\n");
      out.write("					<label for=\"quantity\" class=\"form-label\">Quantity:</label> <input\r\n");
      out.write("						type=\"number\" class=\"form-control\" id=\"quantity\" min=\"1\"\r\n");
      out.write("						placeholder=\"Enter quantity\">\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				<button type=\"button\" class=\"btn btn-success mb-3\"\r\n");
      out.write("					onclick=\"addProduct()\">Add Product</button>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("				<table class=\"table table-bordered mt-3\" id=\"productTable\">\r\n");
      out.write("					<thead>\r\n");
      out.write("						<tr>\r\n");
      out.write("							<th>Product Name</th>\r\n");
      out.write("							<th>Quantity</th>\r\n");
      out.write("							<th>Action</th>\r\n");
      out.write("						</tr>\r\n");
      out.write("					</thead>\r\n");
      out.write("					<tbody>\r\n");
      out.write("						<!-- Dynamically filled by JS -->\r\n");
      out.write("					</tbody>\r\n");
      out.write("				</table>\r\n");
      out.write("\r\n");
      out.write("				<button type=\"submit\" class=\"btn btn-primary\">Place Order</button>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("			</form>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<script\r\n");
      out.write("		src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("<!--	<script>\r\n");
      out.write("	\r\n");
      out.write("	// Wait for the DOM to be fully loaded\r\n");
      out.write("	document.addEventListener('DOMContentLoaded', function() {\r\n");
      out.write("		// Sidebar toggle functionality\r\n");
      out.write("		const sidebarToggle = document.getElementById('sidebarToggle');\r\n");
      out.write("		const sidebar = document.getElementById('sidebar');\r\n");
      out.write("\r\n");
      out.write("		sidebarToggle.addEventListener('click', function() {\r\n");
      out.write("			sidebar.classList.toggle('collapsed');\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		// Check if we're on mobile\r\n");
      out.write("		function checkMobile() {\r\n");
      out.write("			if (window.innerWidth < 768) {\r\n");
      out.write("				sidebar.classList.add('collapsed');\r\n");
      out.write("			} else {\r\n");
      out.write("				sidebar.classList.remove('collapsed');\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		// Initial check\r\n");
      out.write("		checkMobile();\r\n");
      out.write("\r\n");
      out.write("		// Listen for window resize\r\n");
      out.write("		window.addEventListener('resize', checkMobile);\r\n");
      out.write("  let purchaseProducts = [];\r\n");
      out.write("\r\n");
      out.write("  function addProduct() {\r\n");
      out.write("	  const productSelect = document.getElementById('product');\r\n");
      out.write("	  const selectedOption = productSelect.options[productSelect.selectedIndex];\r\n");
      out.write("	  const quantityInput = document.getElementById('quantity');\r\n");
      out.write("	  const tableBody = document.getElementById('productTable').getElementsByTagName('tbody')[0];\r\n");
      out.write("\r\n");
      out.write("	  const productId = productSelect.value;\r\n");
      out.write("	  const productName = selectedOption.getAttribute('data-name') || selectedOption.text;\r\n");
      out.write("	  const quantity = parseInt(quantityInput.value);\r\n");
      out.write("\r\n");
      out.write("	  if (!productId) {\r\n");
      out.write("	    alert(\"Please select a product.\");\r\n");
      out.write("	    return;\r\n");
      out.write("	  }\r\n");
      out.write("\r\n");
      out.write("	  if (isNaN(quantity) || quantity <= 0) {\r\n");
      out.write("	    alert(\"Please enter a valid quantity.\");\r\n");
      out.write("	    return;\r\n");
      out.write("	  }\r\n");
      out.write("\r\n");
      out.write("	  if (purchaseProducts.some(p => p.productId === productId)) {\r\n");
      out.write("	    alert(\"Product already added. Remove it before adding again.\");\r\n");
      out.write("	    return;\r\n");
      out.write("	  }\r\n");
      out.write("\r\n");
      out.write("	  // Add to array\r\n");
      out.write("	  purchaseProducts.push({ productId, productName, quantity });\r\n");
      out.write("\r\n");
      out.write("	  // Add to table\r\n");
      out.write("	  const newRow = tableBody.insertRow();\r\n");
      out.write("	  newRow.setAttribute(\"data-product-id\", productId);\r\n");
      out.write("\r\n");
      out.write("	  // Use insertCell instead of innerHTML\r\n");
      out.write("	  const cell0 = newRow.insertCell(0);\r\n");
      out.write("	  cell0.innerText = productName;\r\n");
      out.write("	  const hiddenInputId = document.createElement(\"input\");\r\n");
      out.write("	  hiddenInputId.type = \"hidden\";\r\n");
      out.write("	  hiddenInputId.name = \"productId[]\";\r\n");
      out.write("	  hiddenInputId.value = productId;\r\n");
      out.write("	  cell0.appendChild(hiddenInputId);\r\n");
      out.write("\r\n");
      out.write("	  const cell1 = newRow.insertCell(1);\r\n");
      out.write("	  cell1.innerText = quantity;\r\n");
      out.write("	  const hiddenInputQty = document.createElement(\"input\");\r\n");
      out.write("	  hiddenInputQty.type = \"hidden\";\r\n");
      out.write("	  hiddenInputQty.name = \"quantity[]\";\r\n");
      out.write("	  hiddenInputQty.value = quantity;\r\n");
      out.write("	  cell1.appendChild(hiddenInputQty);\r\n");
      out.write("\r\n");
      out.write("	  const cell2 = newRow.insertCell(2);\r\n");
      out.write("	  cell2.innerHTML = `<button type=\"button\" class=\"btn btn-danger btn-sm\" onclick=\"removeProduct(this)\">Remove</button>`;\r\n");
      out.write("\r\n");
      out.write("	  // Reset form\r\n");
      out.write("	  productSelect.selectedIndex = 0;\r\n");
      out.write("	  quantityInput.value = \"\";\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  function removeProduct(button) {\r\n");
      out.write("    const row = button.closest(\"tr\");\r\n");
      out.write("    const productId = row.getAttribute(\"data-product-id\");\r\n");
      out.write("\r\n");
      out.write("    // Remove from array\r\n");
      out.write("    purchaseProducts = purchaseProducts.filter(p => p.productId !== productId);\r\n");
      out.write("\r\n");
      out.write("    // Remove row\r\n");
      out.write("    row.remove();\r\n");
      out.write("  }\r\n");
      out.write("</script>-->\r\n");
      out.write("<script>\r\n");
      out.write("  // Sidebar toggle\r\n");
      out.write("  document.addEventListener('DOMContentLoaded', function () {\r\n");
      out.write("    const sidebarToggle = document.getElementById('sidebarToggle');\r\n");
      out.write("    const sidebar = document.getElementById('sidebar');\r\n");
      out.write("\r\n");
      out.write("    sidebarToggle.addEventListener('click', function () {\r\n");
      out.write("      sidebar.classList.toggle('collapsed');\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    function checkMobile() {\r\n");
      out.write("      if (window.innerWidth < 768) {\r\n");
      out.write("        sidebar.classList.add('collapsed');\r\n");
      out.write("      } else {\r\n");
      out.write("        sidebar.classList.remove('collapsed');\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    checkMobile();\r\n");
      out.write("    window.addEventListener('resize', checkMobile);\r\n");
      out.write("  });\r\n");
      out.write("\r\n");
      out.write("  // Move these outside the DOMContentLoaded so they are in global scope\r\n");
      out.write("  let purchaseProducts = [];\r\n");
      out.write("\r\n");
      out.write("  function addProduct() {\r\n");
      out.write("    const productSelect = document.getElementById('product');\r\n");
      out.write("    const selectedOption = productSelect.options[productSelect.selectedIndex];\r\n");
      out.write("    const quantityInput = document.getElementById('quantity');\r\n");
      out.write("    const tableBody = document.getElementById('productTable').getElementsByTagName('tbody')[0];\r\n");
      out.write("\r\n");
      out.write("    const productId = productSelect.value;\r\n");
      out.write("    const productName = selectedOption.getAttribute('data-name') || selectedOption.text;\r\n");
      out.write("    const quantity = parseInt(quantityInput.value);\r\n");
      out.write("\r\n");
      out.write("    if (!productId) {\r\n");
      out.write("      alert(\"Please select a product.\");\r\n");
      out.write("      return;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (isNaN(quantity) || quantity <= 0) {\r\n");
      out.write("      alert(\"Please enter a valid quantity.\");\r\n");
      out.write("      return;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (purchaseProducts.some(p => p.productId === productId)) {\r\n");
      out.write("      alert(\"Product already added. Remove it before adding again.\");\r\n");
      out.write("      return;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    purchaseProducts.push({ productId, productName, quantity });\r\n");
      out.write("\r\n");
      out.write("    const newRow = tableBody.insertRow();\r\n");
      out.write("    newRow.setAttribute(\"data-product-id\", productId);\r\n");
      out.write("\r\n");
      out.write("    const cell0 = newRow.insertCell(0);\r\n");
      out.write("    cell0.innerText = productName;\r\n");
      out.write("    const hiddenInputId = document.createElement(\"input\");\r\n");
      out.write("    hiddenInputId.type = \"hidden\";\r\n");
      out.write("    hiddenInputId.name = \"productId[]\";\r\n");
      out.write("    hiddenInputId.value = productId;\r\n");
      out.write("    cell0.appendChild(hiddenInputId);\r\n");
      out.write("\r\n");
      out.write("    const cell1 = newRow.insertCell(1);\r\n");
      out.write("    cell1.innerText = quantity;\r\n");
      out.write("    const hiddenInputQty = document.createElement(\"input\");\r\n");
      out.write("    hiddenInputQty.type = \"hidden\";\r\n");
      out.write("    hiddenInputQty.name = \"quantity[]\";\r\n");
      out.write("    hiddenInputQty.value = quantity;\r\n");
      out.write("    cell1.appendChild(hiddenInputQty);\r\n");
      out.write("\r\n");
      out.write("    const cell2 = newRow.insertCell(2);\r\n");
      out.write("    cell2.innerHTML = `<button type=\"button\" class=\"btn btn-danger btn-sm\" onclick=\"removeProduct(this)\">Remove</button>`;\r\n");
      out.write("\r\n");
      out.write("    productSelect.selectedIndex = 0;\r\n");
      out.write("    quantityInput.value = \"\";\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  function removeProduct(button) {\r\n");
      out.write("    const row = button.closest(\"tr\");\r\n");
      out.write("    const productId = row.getAttribute(\"data-product-id\");\r\n");
      out.write("\r\n");
      out.write("    purchaseProducts = purchaseProducts.filter(p => p.productId !== productId);\r\n");
      out.write("    row.remove();\r\n");
      out.write("  }\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
