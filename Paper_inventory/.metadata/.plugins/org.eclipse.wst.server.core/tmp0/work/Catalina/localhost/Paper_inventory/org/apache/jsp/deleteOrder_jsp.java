/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.12
 * Generated at: 2025-06-02 19:01:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.PreparedStatement;
import java.sql.DriverManager;
import com.mysql.cj.jdbc.Driver;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Connection;

public final class deleteOrder_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.mysql.cj.jdbc.Driver");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.sql.Statement");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

String orderId = request.getParameter("orderId");
if (orderId == null || orderId.trim().isEmpty()) {
    out.println("<script>alert('Order ID missing.'); window.history.back();</script>");
    return;
}

Connection con = null;
PreparedStatement psGetItems = null, psUpdateStock = null;
PreparedStatement psNullifyBilling = null, psDeleteBilling = null;
PreparedStatement psDeleteItems = null, psDeleteOrder = null;

try {
    Class.forName("com.mysql.cj.jdbc.Driver");
    con = DriverManager.getConnection("jdbc:mysql://localhost:3307/inventory", "root", "");
    con.setAutoCommit(false); // Start transaction

    // Step 1: Restore product stock from order_items
    psGetItems = con.prepareStatement("SELECT product_id, quantity FROM order_items WHERE order_id = ?");
    psGetItems.setString(1, orderId);
    ResultSet rsItems = psGetItems.executeQuery();

    psUpdateStock = con.prepareStatement("UPDATE products SET quantity_in_stock = quantity_in_stock + ? WHERE product_id = ?");
    while (rsItems.next()) {
        int productId = rsItems.getInt("product_id");
        int quantity = rsItems.getInt("quantity");
        psUpdateStock.setInt(1, quantity);
        psUpdateStock.setInt(2, productId);
        psUpdateStock.executeUpdate();
    }

    // Step 2: Nullify billing_id in orders to break foreign key dependency
    psNullifyBilling = con.prepareStatement("UPDATE orders SET billing_id = NULL WHERE id = ?");
    psNullifyBilling.setString(1, orderId);
    psNullifyBilling.executeUpdate();

    // Step 3: Delete from billing
    psDeleteBilling = con.prepareStatement("DELETE FROM billing WHERE order_id = ?");
    psDeleteBilling.setString(1, orderId);
    psDeleteBilling.executeUpdate();

    // Step 4: Delete from order_items
    psDeleteItems = con.prepareStatement("DELETE FROM order_items WHERE order_id = ?");
    psDeleteItems.setString(1, orderId);
    psDeleteItems.executeUpdate();

    // Step 5: Delete from orders
    psDeleteOrder = con.prepareStatement("DELETE FROM orders WHERE id = ?");
    psDeleteOrder.setString(1, orderId);
    psDeleteOrder.executeUpdate();

    con.commit();

    out.println("<script>alert('Order deleted successfully and stock restored.'); window.location='Order.jsp';</script>");

} catch (Exception e) {
    if (con != null) con.rollback();
    out.println("<pre>Error: " + e.getMessage() + "</pre>");
} finally {
    try { if (psGetItems != null) psGetItems.close(); } catch (Exception e) {}
    try { if (psUpdateStock != null) psUpdateStock.close(); } catch (Exception e) {}
    try { if (psNullifyBilling != null) psNullifyBilling.close(); } catch (Exception e) {}
    try { if (psDeleteBilling != null) psDeleteBilling.close(); } catch (Exception e) {}
    try { if (psDeleteItems != null) psDeleteItems.close(); } catch (Exception e) {}
    try { if (psDeleteOrder != null) psDeleteOrder.close(); } catch (Exception e) {}
    try { if (con != null) con.close(); } catch (Exception e) {}
}

      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
