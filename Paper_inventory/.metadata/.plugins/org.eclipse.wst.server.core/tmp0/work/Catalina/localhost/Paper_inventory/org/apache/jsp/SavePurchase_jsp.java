/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.12
 * Generated at: 2025-06-04 14:15:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import com.mysql.cj.xdevapi.JsonArray;
import java.sql.*;
import java.sql.DriverManager;
import com.mysql.cj.jdbc.Driver;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Connection;
import java.text.SimpleDateFormat;
import java.io.StringWriter;
import java.io.PrintWriter;
import java.sql.*;
import com.mysql.cj.jdbc.Driver;

public final class SavePurchase_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.mysql.cj.jdbc.Driver");
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("com.mysql.cj.xdevapi.JsonArray");
    _jspx_imports_classes.add("java.io.StringWriter");
    _jspx_imports_classes.add("java.sql.Statement");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Save Purchase Order</title>\r\n");
      out.write("<link\r\n");
      out.write("	href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\"\r\n");
      out.write("	rel=\"stylesheet\" />\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"container mt-5\">\r\n");
      out.write("		");

    String[] productIds = request.getParameterValues("productId[]");
    String[] quantities = request.getParameterValues("quantity[]");

    if (productIds == null || quantities == null || productIds.length == 0) {

      out.write("\r\n");
      out.write("		<div class=\"alert alert-danger\">No products added to the order!</div>\r\n");
      out.write("		<a href=\"CreatePurchaseOrder.jsp\" class=\"btn btn-primary\">Go Back</a>\r\n");
      out.write("		");

    } else {
        Connection con = null;
        PreparedStatement psOrder = null;
        PreparedStatement psItem = null;
        ResultSet rs = null;

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3307/inventory", "root", "");

            // Disable auto-commit for transaction
            con.setAutoCommit(false);

            // Insert into purchase_orders, order_date = current date
            String insertOrderSql = "INSERT INTO purchase_orders (order_date) VALUES (CURDATE())";
            psOrder = con.prepareStatement(insertOrderSql, Statement.RETURN_GENERATED_KEYS);
            int affectedRows = psOrder.executeUpdate();

            if (affectedRows == 0) {
                throw new SQLException("Creating purchase order failed, no rows affected.");
            }

            // Get the generated purchase_order_id
            rs = psOrder.getGeneratedKeys();
            int purchaseOrderId = 0;
            if (rs.next()) {
                purchaseOrderId = rs.getInt(1);
            } else {
                throw new SQLException("Creating purchase order failed, no ID obtained.");
            }

            // Insert each product item
            String insertItemSql = "INSERT INTO purchase_order_items (purchase_order_id, product_id, quantity) VALUES (?, ?, ?)";
            psItem = con.prepareStatement(insertItemSql);

            for (int i = 0; i < productIds.length; i++) {
                int productId = Integer.parseInt(productIds[i]);
                int quantity = Integer.parseInt(quantities[i]);

                psItem.setInt(1, purchaseOrderId);
                psItem.setInt(2, productId);
                psItem.setInt(3, quantity);
                

                psItem.addBatch();
                psItem.executeBatch();
            }
         // Now update quantity_in_stock for each product
            String updateStockSql = "UPDATE products SET quantity_in_stock = quantity_in_stock + ? WHERE product_id = ?";
            PreparedStatement psUpdateStock = con.prepareStatement(updateStockSql);

            for (int i = 0; i < productIds.length; i++) {
                int productId = Integer.parseInt(productIds[i]);
                int quantity = Integer.parseInt(quantities[i]);

                psUpdateStock.setInt(1, quantity);
                psUpdateStock.setInt(2, productId);
                psUpdateStock.addBatch();
            }
            psUpdateStock.executeBatch();
            psUpdateStock.close();
            // Commit transaction
            con.commit();

      out.write("\r\n");
      out.write("		<div class=\"alert alert-success\">\r\n");
      out.write("			Purchase Order created successfully with ID:\r\n");
      out.write("			");
      out.print( purchaseOrderId );
      out.write("</div>\r\n");
      out.write("		<a href=\"Purchase_order.jsp\" class=\"btn btn-primary\">Create\r\n");
      out.write("			New Order</a>\r\n");
      out.write("\r\n");
      out.write("		");

        } catch (Exception e) {
            if (con != null) {
                try {
                    con.rollback();
                } catch (SQLException ex) {
                    out.println("Rollback failed: " + ex.getMessage());
                }
            }

      out.write("\r\n");
      out.write("		<div class=\"alert alert-danger\">\r\n");
      out.write("			Error saving purchase order:\r\n");
      out.write("			");
      out.print( e.getMessage() );
      out.write("</div>\r\n");
      out.write("		<a href=\"CreatePurchaseOrder.jsp\" class=\"btn btn-primary\">Try\r\n");
      out.write("			Again</a>\r\n");
      out.write("		");

        } finally {
            if (rs != null) try { rs.close(); } catch (SQLException ignored) {}
            if (psOrder != null) try { psOrder.close(); } catch (SQLException ignored) {}
            if (psItem != null) try { psItem.close(); } catch (SQLException ignored) {}
            if (con != null) try { con.close(); } catch (SQLException ignored) {}
        }
    }

      out.write("\r\n");
      out.write("		<script>\r\n");
      out.write("    alert(\"Purchase Order created successfully !!\");\r\n");
      out.write("    window.location.href = \"Purchase_order.jsp\";\r\n");
      out.write("</script>\r\n");
      out.write("	</div>\r\n");
      out.write("	<script\r\n");
      out.write("		src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
