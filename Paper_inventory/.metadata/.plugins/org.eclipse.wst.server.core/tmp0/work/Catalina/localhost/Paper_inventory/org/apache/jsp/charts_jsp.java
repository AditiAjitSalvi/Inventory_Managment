/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.12
 * Generated at: 2025-06-03 04:13:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.io.InputStream;
import java.util.*;
import java.text.SimpleDateFormat;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import jakarta.servlet.http.Part;
import java.io.*;
import java.util.*;
import java.text.SimpleDateFormat;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.io.*;
import java.util.*;
import java.text.SimpleDateFormat;

public final class charts_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("org.apache.poi.ss.usermodel");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.apache.poi.xssf.usermodel.XSSFWorkbook");
    _jspx_imports_classes.add("jakarta.servlet.http.Part");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("java.io.InputStream");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>Sales Prediction</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<h2>Upload Excel File (.xlsx)</h2>\r\n");
      out.write("\r\n");
      out.write("	<form method=\"post\" enctype=\"multipart/form-data\">\r\n");
      out.write("		<input type=\"file\" name=\"file\" accept=\".xlsx\" required />\r\n");
      out.write("		<button type=\"submit\">Analyze</button>\r\n");
      out.write("	</form>\r\n");
      out.write("\r\n");
      out.write("	");

	if ("POST".equalsIgnoreCase(request.getMethod())) {
		try {
			Part filePart = request.getPart("file");

			if (filePart == null || filePart.getSize() == 0) {
	
      out.write("\r\n");
      out.write("	<p style=\"color: red;\">Error: No file uploaded.</p>\r\n");
      out.write("	");

	} else {
	InputStream inputStream = filePart.getInputStream();
	Workbook workbook = new XSSFWorkbook(inputStream);
	Sheet sheet = workbook.getSheetAt(0);

	Map<String, Integer> productSalesLastYear = new HashMap<>();
	int currentYear = Calendar.getInstance().get(Calendar.YEAR);
	int salesThisYear = 0;

	for (Row row : sheet) {
		if (row.getRowNum() == 0)
			continue; // skip header

		Cell productCell = row.getCell(0);
		Cell dateCell = row.getCell(1);
		Cell quantityCell = row.getCell(2);

		if (productCell == null || dateCell == null || quantityCell == null)
			continue;

		String product = productCell.getStringCellValue();
		Date date = dateCell.getDateCellValue();
		int quantity = (int) quantityCell.getNumericCellValue();

		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		int year = cal.get(Calendar.YEAR);

		if (year == currentYear) {
			salesThisYear += quantity;
		} else if (year == currentYear - 1) {
			productSalesLastYear.put(product, productSalesLastYear.getOrDefault(product, 0) + quantity);
		}
	}

	String topProduct = "N/A";
	if (!productSalesLastYear.isEmpty()) {
		topProduct = Collections.max(productSalesLastYear.entrySet(), Map.Entry.comparingByValue()).getKey();
	}
	
      out.write("\r\n");
      out.write("	<h3>Prediction Results:</h3>\r\n");
      out.write("	<p>\r\n");
      out.write("		<strong>Top Selling Product of Last Year:</strong>\r\n");
      out.write("		");
      out.print(topProduct);
      out.write("</p>\r\n");
      out.write("	<p>\r\n");
      out.write("		<strong>Total Sales of This Year:</strong>\r\n");
      out.write("		");
      out.print(salesThisYear);
      out.write("</p>\r\n");
      out.write("	");

	workbook.close();
	}
	} catch (Exception e) {
	
      out.write("\r\n");
      out.write("	<p style=\"color: red;\">\r\n");
      out.write("		Exception:\r\n");
      out.write("		");
      out.print(e.getMessage());
      out.write("</p>\r\n");
      out.write("	");

	}
	}
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>Sales Prediction</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<h2>Upload Excel File for Sales Prediction</h2>\r\n");
      out.write("\r\n");
      out.write("	<form method=\"post\" enctype=\"multipart/form-data\">\r\n");
      out.write("		<input type=\"file\" name=\"file\" accept=\".xlsx\" required />\r\n");
      out.write("		<button type=\"submit\">Upload & Analyze</button>\r\n");
      out.write("	</form>\r\n");
      out.write("\r\n");
      out.write("	");

	if ("POST".equalsIgnoreCase(request.getMethod())) {

		 Part filePart = request.getPart("file");
		if (filePart == null) {
	
      out.write("\r\n");
      out.write("	<p style=\"color: red;\">No file uploaded.</p>\r\n");
      out.write("	");

	} else {
	Map<String, Integer> productSalesLastYear = new HashMap<>();
	Map<String, Integer> monthlySalesLastYear = new TreeMap<>();

	Calendar cal = Calendar.getInstance();
	int currentYear = cal.get(Calendar.YEAR);
	int lastYear = currentYear - 1;

	try (InputStream inputStream = filePart.getInputStream(); Workbook workbook = new XSSFWorkbook(inputStream)) {

		Sheet sheet = workbook.getSheetAt(0);
		for (Row row : sheet) {
			if (row.getRowNum() == 0)
		continue; // skip header

			Cell productCell = row.getCell(0);
			Cell dateCell = row.getCell(1);
			Cell quantityCell = row.getCell(2);

			if (productCell == null || dateCell == null || quantityCell == null)
		continue;

			String productName = productCell.getStringCellValue();
			Date date = dateCell.getDateCellValue();

			cal.setTime(date);
			int year = cal.get(Calendar.YEAR);
			int month = cal.get(Calendar.MONTH) + 1;

			int quantity = (int) quantityCell.getNumericCellValue();

			if (year == lastYear) {
		productSalesLastYear.put(productName, productSalesLastYear.getOrDefault(productName, 0) + quantity);

		String monthKey = String.format("%04d-%02d", year, month);
		monthlySalesLastYear.put(monthKey, monthlySalesLastYear.getOrDefault(monthKey, 0) + quantity);
			}
		}
	} catch (Exception e) {
	
      out.write("\r\n");
      out.write("	<p style=\"color: red;\">\r\n");
      out.write("		Error processing file:\r\n");
      out.write("		");
      out.print(e.getMessage());
      out.write("</p>\r\n");
      out.write("	");

	return;
	}

	String mostSellingProduct = "";
	if (!productSalesLastYear.isEmpty()) {
	mostSellingProduct = Collections.max(productSalesLastYear.entrySet(), Map.Entry.comparingByValue()).getKey();
	}

	int totalLastYearSales = monthlySalesLastYear.values().stream().mapToInt(Integer::intValue).sum();
	int monthsCounted = monthlySalesLastYear.size() == 0 ? 1 : monthlySalesLastYear.size();
	int avgMonthlySales = totalLastYearSales / monthsCounted;
	int predictedSalesThisYear = avgMonthlySales * 12;
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<h3>Analysis Results</h3>\r\n");
      out.write("	<p>\r\n");
      out.write("		<b>Most Selling Product Last Year:</b>\r\n");
      out.write("		");
      out.print(mostSellingProduct);
      out.write("</p>\r\n");
      out.write("	<p>\r\n");
      out.write("		<b>Total Sales Last Year:</b>\r\n");
      out.write("		");
      out.print(totalLastYearSales);
      out.write("\r\n");
      out.write("		units\r\n");
      out.write("	</p>\r\n");
      out.write("	<p>\r\n");
      out.write("		<b>Predicted Sales for This Year:</b>\r\n");
      out.write("		");
      out.print(predictedSalesThisYear);
      out.write("\r\n");
      out.write("		units\r\n");
      out.write("	</p>\r\n");
      out.write("\r\n");
      out.write("	");

	}
	}
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
